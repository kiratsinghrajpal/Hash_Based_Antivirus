#include <stdio.h>	
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define STR_VALUE(val) #val
#define STR(name) STR_VALUE(name)

#define PATH_LEN 256
#define MD5_LEN 32

int CalcFileMD5(char *file_name, char *md5_sum)
{
    #define MD5SUM_CMD_FMT "md5sum %." STR(PATH_LEN) "s 2>/dev/null"
    char cmd[PATH_LEN + sizeof (MD5SUM_CMD_FMT)];
    sprintf(cmd, MD5SUM_CMD_FMT, file_name);
    #undef MD5SUM_CMD_FMT

    FILE *p = popen(cmd, "r");
    if (p == NULL) return 0;

    int i, ch;
    for (i = 0; i < MD5_LEN && isxdigit(ch = fgetc(p)); i++) 
    {
        *md5_sum++ = ch;
    }

    *md5_sum = '\0';
    pclose(p);
    return i == MD5_LEN;
}

int main(int argc, char *argv[])
{	
	char file1[100];
	printf("Enter file name to check \n");
	scanf("%s",&file1);
    char md5[MD5_LEN + 1];
    if (!CalcFileMD5(file1, md5)) 
    {
        puts("Error occured!");
    } 
    else 
    {
        printf("Success! MD5 sum is: %s\n",md5);
    }
   char num[100];
   FILE *fptr;

   if ((fptr = fopen("data.txt","r")) == NULL){
       printf("Error! opening file");

       // Program exits if the file pointer returns NULL.
       exit(0);
   }

   fscanf(fptr,"%s", &num);
   printf("%s\n",num);
   if(strcmp(md5,num) == 0)
   {
   		printf("VIRUS!\n");
   }
   else
   {
   		printf("not a virus\n");
   }
   fclose(fptr);   
}




///
#include <dirent.h>
#include <sys/types.h>
#include <string.h>
#include <stdio.h>

void listFilesRecursively(char *path);
int main()
{
    // Directory path to list files
    char path[100];

    // Input path from user
    printf("Enter path to list files: ");
    scanf("%s", path);

    listFilesRecursively(path);

    return 0;
}


/**
 * Lists all files and sub-directories recursively 
 * considering path as base path.
 */
 void listFilesRecursively(char *basePath)
{
    char path[1000];
    struct dirent *dp;
    DIR *dir = opendir(basePath);

    // Unable to open directory stream
    if (!dir)
        return;

    while ((dp = readdir(dir)) != NULL)
    {
        if (strcmp(dp->d_name, ".") != 0 && strcmp(dp->d_name, "..") != 0)
        {
            printf("%s\n", dp->d_name);

            // Construct new path from our base path
            strcpy(path, basePath);
            strcat(path, "/");
            strcat(path, dp->d_name);
            listFilesRecursively(path);
        }
    }

    closedir(dir);
}